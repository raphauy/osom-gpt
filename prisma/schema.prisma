
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  role          String    @default("user")
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  client        Client?    @relation(fields: [clientId], references: [id], onDelete: NoAction)
  clientId      String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Client {
  id                    String   @id @default(cuid())
  name                  String
  description           String?
  url                   String?
  slug                  String    @unique
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  users                 User[]
  documents             Document[]
  conversations         Conversation[]
  whatsappEndpoint      String?
  prompt                String?   @db.Text
  promptTokensPrice     Float      @default(0)
  completionTokensPrice Float  @default(0)
}

model Document {
  id                     String   @id @default(cuid())
  name                   String                               // gennext: show.column
  description            String?                              // gennext: show.column
  jsonContent            String?  @db.Text                    
  textContent            String?  @db.Text                    // gennext: show.column
  type                   String   @default("text")            // gennext: skip.zod
  fileSize               Int?
  wordsCount             Int?     @default(0)                 // gennext: show.column
  status                 String   @default("pending")         // gennext: skip.zod

  externalId             String?                              // gennext: skip.zod
  url                    String?                              // gennext: skip.zod

  createdAt             DateTime  @default(now())             // gennext: skip.zod
  updatedAt             DateTime  @updatedAt @default(now())  // gennext: skip.zod show.column

  client                Client   @relation(fields: [clientId], references: [id], onDelete: NoAction) // gennext: skip.list
  clientId              String

  sections              Section[]                             // gennext: skip.list
}

model Section {
  id                    String   @id @default(cuid())
  secuence              Int                                   // gennext: show.column
  tokenCount            Int                                   // gennext: show.column
  status                String   @default("pending")          // gennext: show.column

  createdAt             DateTime  @default(now())             // gennext: skip.zod
  updatedAt             DateTime  @updatedAt @default(now())  // gennext: skip.zod

  document              Document @relation(fields: [documentId], references: [id], onDelete: NoAction) // gennext: skip.list
  documentId            String                                

  text                  String  @db.Text                      // gennext: show.column
  embedding Unsupported("vector(3072)")?                      // gennext: skip.zod
	@@map("Section")                                            // gennext: skip.list
}

model Conversation {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  phone       String
  messages    Message[]
  client      Client  @relation(fields: [clientId], references: [id], onDelete: NoAction)
  clientId    String
  operacion   String?
  tipo        String?
  zona        String?
  presupuesto String?
}

model Message {
  id                String      @id @default(cuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  role              String
  content           String      @db.Text
  gptData           String?     @db.Text
  conversationId    String
  conversation      Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  promptTokens      Int       @default(0)
  completionTokens  Int       @default(0)
}

model Config {
  id             String       @id @default(cuid())
  name           String       @unique
  value          String?      @db.Text
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt  
}

model MessageSection {
  id                String      @id @default(cuid())
  messageId         String
  sectionId         String

  @@unique([messageId, sectionId])
}